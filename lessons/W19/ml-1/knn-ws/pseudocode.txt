# Input:
#  * a point P to classify
#  * a number K of neighbors to look at
#  * a bunch of data points with known label
# 
# Algorithm:
# Find the K points closest to P.
# Count the labels of those K closest points.
# The label with the highest count is the label we assign to P.

def distance(p, q):
    d = 0
    for i in range(len(p)):
        d += (p[i] - q[i]) ** 2
    return math.sqrt(d)

def find_k_closest_points(p, k):
    # sort data points (q) by how close it is to p
    sorted_data = sorted(data, key=lambda q: distance(p, q[1:]))
    return sorted_data[:k] # return the first (closest) k

def find_label_with_highest_count(closest):
    B = 0
    M = 0
    for point in closest:
        if point[0] == 'M':
            # increase the count of M by one in this case.
            pass
        if point[0] == 'B':
            # do the same for B
            pass
    if B > M:
        # if B's count is greater than M's, what label should be
        # returned?
        return what
    else:
        # Otherwise, what label to return?
        return what

def classify(p, k):
    #
    closest = find_k_closest_points(p, k)
    # 
    label = find_label_with_highest_count(closest)
    return label

def validate(test_data, k):
    good = 0
    bad = 0
    for test in test_data:
        classification = classify(test[1:], 3)
        if classification == test[0]:
            good += 1
        else:
            bad += 1

    return good / float(good + bad)

def main():
    does the thing

data = small_data # change to big_data to run on full dataset

small_data = [
    [927241,'M',20.6,29.33,140.1,1265,0.1178,0.277,0.3514,0.152,0.2397,0.07016],
    [90944601,'B',13.78,15.79,88.37,585.9,0.08817,0.06718,0.01055,0.009937,0.1405,0.05848],
    [875878,'B',12.91,16.33,82.53,516.4,0.07941,0.05366,0.03873,0.02377,0.1829,0.05667],
    [87930,'B',12.47,18.6,81.09,481.9,0.09965,0.1058,0.08005,0.03821,0.1925,0.06373],
    [901315,'B',10.57,20.22,70.15,338.3,0.09073,0.166,0.228,0.05941,0.2188,0.0845],
    [896864,'B',12.98,19.35,84.52,514,0.09579,0.1125,0.07107,0.0295,0.1761,0.0654],
    [855133,'M',14.99,25.2,95.54,698.8,0.09387,0.05131,0.02398,0.02899,0.1565,0.05504],
    [855625,'M',19.07,24.81,128.3,1104,0.09081,0.219,0.2107,0.09961,0.231,0.06343],
    [868871,'B',11.28,13.39,73,384.8,0.1164,0.1136,0.04635,0.04796,0.1771,0.06072],
    [895633,'M',16.26,21.88,107.5,826.8,0.1165,0.1283,0.1799,0.07981,0.1869,0.06532],
    [8511133,'M',15.34,14.26,102.5,704.4,0.1073,0.2135,0.2077,0.09756,0.2521,0.07032],
    [903516,'M',21.61,22.28,144.4,1407,0.1167,0.2087,0.281,0.1562,0.2162,0.06606],
    [8670,'M',15.46,19.48,101.7,748.9,0.1092,0.1223,0.1466,0.08087,0.1931,0.05796],
    [859464,'B',9.465,21.01,60.11,269.4,0.1044,0.07773,0.02172,0.01504,0.1717,0.06899],
    [90312,'M',19.55,23.21,128.9,1174,0.101,0.1318,0.1856,0.1021,0.1989,0.05884],
    [886226,'M',19.45,19.33,126.5,1169,0.1035,0.1188,0.1379,0.08591,0.1776,0.05647],
    [9012568,'B',15.19,13.21,97.65,711.8,0.07963,0.06934,0.03393,0.02657,0.1721,0.05544],
    [919537,'B',10.96,17.62,70.79,365.6,0.09687,0.09752,0.05263,0.02788,0.1619,0.06408],
    [905686,'B',11.89,21.17,76.39,433.8,0.09773,0.0812,0.02555,0.02179,0.2019,0.0629],
    [908445,'M',18.82,21.97,123.7,1110,0.1018,0.1389,0.1594,0.08744,0.1943,0.06132],
]

if __name__ == '__main__':
   main()
